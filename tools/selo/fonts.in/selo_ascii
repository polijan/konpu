#include "../../../src/glyph_constants/glyph_ascii.h"
#include "../../../src/glyph_constants/glyph_cpc.h"

#ifndef ASCII_SIZE
#define ASCII_SIZE 4
#endif

#if ASCII_SIZE <= 4
#   define ASCII(x)          UTIL_CAT(UTIL_CAT(UTIL_CAT(GLYPH16_ASCII, ASCII_SIZE), _), x)
#   define ASCII_BOLD(x)     UTIL_CAT(UTIL_CAT(UTIL_CAT(GLYPH16_ASCII, ASCII_SIZE), _BOLD_), x)
#   define ASCII_ITALIC(x)   UTIL_CAT(UTIL_CAT(UTIL_CAT(GLYPH16_ASCII, ASCII_SIZE), _ITALIC_), x)
#elif ASCII_SIZE <= 8
#   define ASCII(x)          UTIL_CAT(UTIL_CAT(UTIL_CAT(GLYPH32_ASCII, ASCII_SIZE), _), x)
#   define ASCII_BOLD(x)     UTIL_CAT(UTIL_CAT(UTIL_CAT(GLYPH32_ASCII, ASCII_SIZE), _BOLD_), x)
#   define ASCII_ITALIC(x)   UTIL_CAT(UTIL_CAT(UTIL_CAT(GLYPH32_ASCII, ASCII_SIZE), _ITALIC_), x)
#else
#   error "Wrong ASCII_SIZE"
#endif

// Printable ASCII
0020    ASCII(SPACE)
0021    ASCII(EXCLAMATION_MARK)
0022    ASCII(DOUBLE_QUOTE)
0023    ASCII(HASHTAG)
0024    ASCII(DOLLAR_SIGN)
0025    ASCII(PERCENT_SIGN)
0026    ASCII(AMPERSAND)
0027    ASCII(SINGLE_QUOTE)
0028    ASCII(LEFT_PARENTHESIS)
0029    ASCII(RIGHT_PARENTHESIS)
002A    ASCII(ASTERISK)
002B    ASCII(PLUS_SIGN)
002C    ASCII(COMMA)
002D    ASCII(MINUS_SIGN)
002E    ASCII(DOT)
002F    ASCII(SLASH)
0030    ASCII(0)
0031    ASCII(1)
0032    ASCII(2)
0033    ASCII(3)
0034    ASCII(4)
0035    ASCII(5)
0036    ASCII(6)
0037    ASCII(7)
0038    ASCII(8)
0039    ASCII(9)
003A    ASCII(COLON)
003B    ASCII(SEMICOLON)
003C    ASCII(LESS_THAN_SIGN)
003D    ASCII(EQUAL_SIGN)
003E    ASCII(GREATER_THAN_SIGN)
003F    ASCII(QUESTION_MARK)
0040    ASCII(AT_SIGN)
0041    ASCII(A)
0042    ASCII(B)
0043    ASCII(C)
0044    ASCII(D)
0045    ASCII(E)
0046    ASCII(F)
0047    ASCII(G)
0048    ASCII(H)
0049    ASCII(I)
004A    ASCII(J)
004B    ASCII(K)
004C    ASCII(L)
004D    ASCII(M)
004E    ASCII(N)
004F    ASCII(O)
0050    ASCII(P)
0051    ASCII(Q)
0052    ASCII(R)
0053    ASCII(S)
0054    ASCII(T)
0055    ASCII(U)
0056    ASCII(V)
0057    ASCII(W)
0058    ASCII(X)
0059    ASCII(Y)
005A    ASCII(Z)
005B    ASCII(LEFT_SQUARE_BACKET)
005C    ASCII(BACKSLASH)
005D    ASCII(RIGHT_SQUARE_BRACKET)
005E    ASCII(CARET)
005F    ASCII(UNDERSCORE)
0060    ASCII(BACKQUOTE)
0061    ASCII(a)
0062    ASCII(b)
0063    ASCII(c)
0064    ASCII(d)
0065    ASCII(e)
0066    ASCII(f)
0067    ASCII(g)
0068    ASCII(h)
0069    ASCII(i)
006A    ASCII(j)
006B    ASCII(k)
006C    ASCII(l)
006D    ASCII(m)
006E    ASCII(n)
006F    ASCII(o)
0070    ASCII(p)
0071    ASCII(q)
0072    ASCII(r)
0073    ASCII(s)
0074    ASCII(t)
0075    ASCII(u)
0076    ASCII(v)
0077    ASCII(w)
0078    ASCII(x)
0079    ASCII(y)
007A    ASCII(z)
007B    ASCII(LEFT_CURLY_BACKET)
007C    ASCII(VERTICAL_BAR)
007D    ASCII(RIGHT_CURLY_BRACKET)
007E    ASCII(TILDE)


// "German" letters... those are needed for Figlet fonts (altough of course,
// we could leave them blank), we do it ourself in same style as CPC.
// TODO: - Those are Glyph64, we need some glyph32 with different sizes.
//       - Also should umlaut be tighten on o and u (36 instead of 66)?
00C4  0063637F633E0063  // Umlaut A
00D6  003E6363633E0063  // Umlaut O
00DC  003E636363630063  // Umlaut U
00E4  006E333E301E0036  // Umlaut a
00F6  003C6666663C0066  // Umlaut o
00FC  007C666666660066  // Umlaut u
00DF  GLYPH64_CPC_B1    // Eszett --> same as greek "beta" 0x03B2


// Smallcaps:
// We map the 4px high uppercase letter from the 3x5 glyph32 font to
// the Unicode codepoints for small capital letters.
// As of Unicode 16, only smallcap X is missing.
// All other smallcaps are located in the following three blocks:
// IPA extensions, Phonetic Extensions, or Latin Extended-D.

#if ASCII_SIZE > 4
#   if ASCII_SIZE == 5
#      define ASCII_SMALLCAP(x)   UTIL_CAT(UTIL_CAT(GLYPH16_ASCII4_, x), 0000)
#   elif ASCII_SIZE <= 8
#      define ASCII_SMALLCAP(x)   UTIL_CAT(UTIL_CAT(UTIL_CAT(GLYPH32_ASCII, ASCII_SIZE), _SMALLCAP_), x)
#   else
#      error "Wrong ASCII_SIZE"
#   endif
1D00   ASCII_SMALLCAP(A)
0299   ASCII_SMALLCAP(B)
1D04   ASCII_SMALLCAP(C)
1D05   ASCII_SMALLCAP(D)
1D07   ASCII_SMALLCAP(E)
A730   ASCII_SMALLCAP(F)
0262   ASCII_SMALLCAP(G)
029C   ASCII_SMALLCAP(H)
026A   ASCII_SMALLCAP(I)
1D0A   ASCII_SMALLCAP(J)
1D0B   ASCII_SMALLCAP(K)
029F   ASCII_SMALLCAP(L)
1D0D   ASCII_SMALLCAP(M)
0274   ASCII_SMALLCAP(N)
1D0F   ASCII_SMALLCAP(O)
1D18   ASCII_SMALLCAP(P)
A7AF   ASCII_SMALLCAP(Q)
0280   ASCII_SMALLCAP(R)
A731   ASCII_SMALLCAP(S)
1D1B   ASCII_SMALLCAP(T)
1D1C   ASCII_SMALLCAP(U)
1D20   ASCII_SMALLCAP(V)
1D21   ASCII_SMALLCAP(W)
//     ASCII_SMALLCAP(X) // smallcap X doesn't exist in current Unicode (use x)
028F   ASCII_SMALLCAP(Y)
1D22   ASCII_SMALLCAP(Z)
#endif


// Bold (mathematical symbols)
1D400  ASCII_BOLD(A)
1D401  ASCII_BOLD(B)
1D402  ASCII_BOLD(C)
1D403  ASCII_BOLD(D)
1D404  ASCII_BOLD(E)
1D405  ASCII_BOLD(F)
1D406  ASCII_BOLD(G)
1D407  ASCII_BOLD(H)
1D408  ASCII_BOLD(I)
1D409  ASCII_BOLD(J)
1D40A  ASCII_BOLD(K)
1D40B  ASCII_BOLD(L)
1D40C  ASCII_BOLD(M)
1D40D  ASCII_BOLD(N)
1D40E  ASCII_BOLD(O)
1D40F  ASCII_BOLD(P)
1D410  ASCII_BOLD(Q)
1D411  ASCII_BOLD(R)
1D412  ASCII_BOLD(S)
1D413  ASCII_BOLD(T)
1D414  ASCII_BOLD(U)
1D415  ASCII_BOLD(V)
1D416  ASCII_BOLD(W)
1D417  ASCII_BOLD(X)
1D418  ASCII_BOLD(Y)
1D419  ASCII_BOLD(Z)
1D41A  ASCII_BOLD(a)
1D41B  ASCII_BOLD(b)
1D41C  ASCII_BOLD(c)
1D41D  ASCII_BOLD(d)
1D41E  ASCII_BOLD(e)
1D41F  ASCII_BOLD(f)
1D420  ASCII_BOLD(g)
1D421  ASCII_BOLD(h)
1D422  ASCII_BOLD(i)
1D423  ASCII_BOLD(j)
1D424  ASCII_BOLD(k)
1D425  ASCII_BOLD(l)
1D426  ASCII_BOLD(m)
1D427  ASCII_BOLD(n)
1D428  ASCII_BOLD(o)
1D429  ASCII_BOLD(p)
1D42A  ASCII_BOLD(q)
1D42B  ASCII_BOLD(r)
1D42C  ASCII_BOLD(s)
1D42D  ASCII_BOLD(t)
1D42E  ASCII_BOLD(u)
1D42F  ASCII_BOLD(v)
1D430  ASCII_BOLD(w)
1D431  ASCII_BOLD(x)
1D432  ASCII_BOLD(y)
1D433  ASCII_BOLD(z)

// Italic (mathematical symbols)
1D434  ASCII_ITALIC(A)
1D435  ASCII_ITALIC(B)
1D436  ASCII_ITALIC(C)
1D437  ASCII_ITALIC(D)
1D438  ASCII_ITALIC(E)
1D439  ASCII_ITALIC(F)
1D43A  ASCII_ITALIC(G)
1D43B  ASCII_ITALIC(H)
1D43C  ASCII_ITALIC(I)
1D43D  ASCII_ITALIC(J)
1D43E  ASCII_ITALIC(K)
1D43F  ASCII_ITALIC(L)
1D440  ASCII_ITALIC(M)
1D441  ASCII_ITALIC(N)
1D442  ASCII_ITALIC(O)
1D443  ASCII_ITALIC(P)
1D444  ASCII_ITALIC(Q)
1D445  ASCII_ITALIC(R)
1D446  ASCII_ITALIC(S)
1D447  ASCII_ITALIC(T)
1D448  ASCII_ITALIC(U)
1D449  ASCII_ITALIC(V)
1D44A  ASCII_ITALIC(W)
1D44B  ASCII_ITALIC(X)
1D44C  ASCII_ITALIC(Y)
1D44D  ASCII_ITALIC(Z)
1D44E  ASCII_ITALIC(a)
1D44F  ASCII_ITALIC(b)
1D450  ASCII_ITALIC(c)
1D451  ASCII_ITALIC(d)
1D452  ASCII_ITALIC(e)
1D453  ASCII_ITALIC(f)
1D454  ASCII_ITALIC(g)
210E   ASCII_ITALIC(h) // codepoint different
1D456  ASCII_ITALIC(i)
1D457  ASCII_ITALIC(j)
1D458  ASCII_ITALIC(k)
1D459  ASCII_ITALIC(l)
1D45A  ASCII_ITALIC(m)
1D45B  ASCII_ITALIC(n)
1D45C  ASCII_ITALIC(o)
1D45D  ASCII_ITALIC(p)
1D45E  ASCII_ITALIC(q)
1D45F  ASCII_ITALIC(r)
1D460  ASCII_ITALIC(s)
1D461  ASCII_ITALIC(t)
1D462  ASCII_ITALIC(u)
1D463  ASCII_ITALIC(v)
1D464  ASCII_ITALIC(w)
1D465  ASCII_ITALIC(x)
1D466  ASCII_ITALIC(y)
1D467  ASCII_ITALIC(z)
