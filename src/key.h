#ifndef  KONPU_KEY_H
#define  KONPU_KEY_H

// In Konpu, a key is identified by an integer whose value is as per the USB HID
// Keyboard ScanCode. Here is a visual reference of where many keys are located
// on the three different types of computer keyboard available today (i.e. ISO,
// ANSI, and JIS):
//
// ```
// ┌──┐ ┌──┬──┬──┬──┐ ┌──┬──┬──┬──┐ ┌──┬──┬──┬──┐ ┌──┬──┬──┐ ┌───────────┐
// │41│ │58│59│60│61│ │62│63│64│65│ │66│67│68│69│ │70│71│72│ │ANSI LAYOUT│
// └──┘ └──┴──┴──┴──┘ └──┴──┴──┴──┘ └──┴──┴──┴──┘ └──┴──┴──┘ └───────────┘
// ┌──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬─────┐ ┌──┬──┬──┐ ┌──┬──┬──┬──┐
// │53│30│31│32│33│34│35│36│37│38│39│45│46│  42 │ │73│74│75│ │83│84│85│86│
// ├──┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬────┤ ├──┼──┼──┤ ├──┼──┼──┼──┤
// │43 │20│26│ 8│21│23│28│24│12│18│19│47│48│ 49 │ │76│77│78│ │95│96│97│  │
// ├───┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴────┤ └──┴──┴──┘ ├──┼──┼──┤87│
// │ 57 │ 4│22│ 7│ 9│10│11│13│14│15│51│52│  40  │            │92│93│94│  │
// ├────┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴──────┤    ┌──┐    ├──┼──┼──┼──┤
// │ 225 │29│27│ 6│25│ 5│17│16│54│55│56│  229   │    │82│    │89│90│91│  │
// ├────┬┴──┼──┴┬─┴──┴──┴──┴──┼──┴┬─┴─┬┴──┬─────┤ ┌──┼──┼──┐ ├──┴──┼──┤88│
// │ 224│227│226│      44     │230│231│101│ 228 │ │80│81│79│ │  98 │99│  │
// └────┴───┴───┴─────────────┴───┴───┴───┴─────┘ └──┴──┴──┘ └─────┴──┴──┘
//
//
// ┌──┐ ┌──┬──┬──┬──┐ ┌──┬──┬──┬──┐ ┌──┬──┬──┬──┐ ┌──┬──┬──┐ ┌───────────┐
// │41│ │58│59│60│61│ │62│63│64│65│ │66│67│68│69│ │70│71│72│ │ISO  LAYOUT│
// └──┘ └──┴──┴──┴──┘ └──┴──┴──┴──┘ └──┴──┴──┴──┘ └──┴──┴──┘ └───────────┘
// ┌──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬─────┐ ┌──┬──┬──┐ ┌──┬──┬──┬──┐
// │53│30│31│32│33│34│35│36│37│38│39│45│46│  42 │ │73│74│75│ │83│84│85│86│
// ├──┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬────┤ ├──┼──┼──┤ ├──┼──┼──┼──┤
// │43 │20│26│ 8│21│23│28│24│12│18│19│47│48│  4 │ │76│77│78│ │95│96│97│  │
// ├───┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┐ 0 │ └──┴──┴──┘ ├──┼──┼──┤87│
// │ 57 │ 4│22│ 7│ 9│10│11│13│14│15│51│52│50│   │            │92│93│94│  │
// ├───┬┴─┬┴─┬┴─┬┴─┬┴─┬┴─┬┴─┬┴─┬┴─┬┴─┬┴─┬┴──┴───┤    ┌──┐    ├──┼──┼──┼──┤
// │225│ *│29│27│ 6│25│ 5│17│16│54│55│56│  229  │    │82│    │89│90│91│  │
// ├───┴┬┼┴──┴──┼──┴──┴──┴──┴──┴┬─┴─┬┴──┼───┬───┤ ┌──┼──┼──┐ ├──┴──┼──┤88│
// │224 │227│226│      44       │230│231│101│228│ │80│81│79│ │  98 │99│  │
// └────┴┼──┴───┴───────────────┴───┴───┴───┴───┘ └──┴──┴──┘ └─────┴──┴──┘
//       └100
//
//                                          ┌─137
// ┌──┐ ┌──┬──┬──┬──┐ ┌──┬──┬──┬──┐ ┌──┬──┬─┼┬──┐ ┌──┬──┬──┐ ┌───────────┐
// │41│ │58│59│60│61│ │62│63│64│65│ │66│67│68│69│ │70│71│72│ │JIS  LAYOUT│
// └──┘ └──┴──┴──┴──┘ └──┴──┴──┴──┘ └──┴──┴─┼┴──┘ └──┴──┴──┘ └───────────┘
// ┌──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬─┼┬──┐ ┌──┬──┬──┐ ┌──┬──┬──┬──┐
// │53│30│31│32│33│34│35│36│37│38│39│45│46│ *│42│ │73│74│75│ │83│84│85│86│
// ├──┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴──┤ ├──┼──┼──┤ ├──┼──┼──┼──┤
// │43 │20│26│ 8│21│23│28│24│12│18│19│47│48│  4 │ │76│77│78│ │95│96│97│  │
// ├───┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┐ 0 │ └──┴──┴──┘ ├──┼──┼──┤87│
// │ 57 │ 4│22│ 7│ 9│10│11│13│14│15│51│52│50│   │            │92│93│94│  │
// ├────┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴┬─┴───┤    ┌──┐    ├──┼──┼──┼──┤
// │ 225 │29│27│ 6│25│ 5│17│16│54│55│56│ *│ 229 │    │82│    │89│90│91│  │
// ├───┬─┴─┬┴──┼──┴┬─┴──┴─┬┴──┬──┴┬─┴┬─┴┬┼┴┬────┤ ┌──┼──┼──┐ ├──┴──┼──┤88│
// │224│227│226│139│  44  │138│136│* │* ││*│228 │ │80│81│79│ │  98 │99│  │
// └───┴───┴───┴───┴──────┴───┴───┴┼─┴┼─┴┼┼┴────┘ └──┴──┴──┘ └─────┴──┴──┘
//                              230┘ 231 │└101
//                                      135
// ```

#include "memory.h"
#include "bits.h"

// The keyboard state in Konpu's RAM: array of four uint64_t totalling 256 bits,
// each representing the state (1=key pressed, 0=key not pressed) of a USB HID
// keyboard scan code.
#define KEY_STATE    ((uint64_t*)(KonpuMemory + KEY_STATE_ADDRESS))

// A copy of the previous keyboard state prior to the last Update().
#define KEY_PREVIOUS ((uint64_t*)(KonpuMemory + KEY_PREVIOUS_ADDRESS))

// Number of keys which we track on the keyboard (should be 256)
#define KEY_COUNT    (CHAR_BIT * KEY_STATE_ADDRESS_CAP_)

// Return true iff a key is currently pressed.
static inline bool KeyIsDown(int key)
{
   if (key < 0 || key >= KEY_COUNT) return false;
   return BitsBitAt(KEY_STATE[key >> 6], key & 63);
}

// Return true iff a key is currently not pressed. Same as !KeyIsDown(key).
static inline bool KeyIsUp(int key)
{ return !KeyIsDown(key); }

// Return true iff a key was Up in the previous state but got Down.
static inline bool KeyIsTriggered(int key)
{
   if (KeyIsUp(key)) return false;
   return !BitsBitAt(KEY_PREVIOUS[key >> 6], key & 63);
}

// Return true iff a key was Down in the previous state but got Up.
static inline bool KeyIsReleased(int key)
{
   if (key < 0 || key >= KEY_COUNT) return false;
   if (KeyIsDown(key)) return false;
   return BitsBitAt(KEY_PREVIOUS[key >> 6], key & 63);
}

// Update the Key state
void KeyUpdate(void);

#endif //KONPU_KEY_H
